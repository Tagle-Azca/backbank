name: Backend DevSecOps Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build Backend
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Run Linting
        run: npm run lint

      - name: Build Application
        run: npm run build

  audit:
    name: Security Audit
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Run Security Audit
        run: npm audit --audit-level=moderate || echo "Audit completed with warnings"

  sast:
    name: Static Code Analysis (SAST)
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Static Code Analysis with ESLint
        run: npx eslint . --ext .js,.jsx --format json --output-file eslint-report.json || echo "ESLint warnings found"

      - uses: actions/upload-artifact@v3
        with:
          name: eslint-report
          path: eslint-report.json

  dast:
    name: Dynamic Application Security Testing (DAST)
    runs-on: ubuntu-20.04
    needs: [audit, sast]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Build and Run Backend
        run: |
          docker build -t backend-app .
          docker run -d -p 5000:5000 backend-app

      - name: Run OWASP ZAP Scan
        run: |
          docker pull owasp/zap2docker-stable
          docker run --rm -v $(pwd):/zap/wrk:rw owasp/zap2docker-stable zap-baseline.py -t http://localhost:5000 -J zap-results.json || echo "ZAP scan completed with warnings"

      - uses: actions/upload-artifact@v3
        with:
          name: zap-results
          path: zap-results.json

  test:
    name: Unit Tests
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm test -- --coverage

      - uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: coverage/

  deploy:
    name: Deploy Backend
    runs-on: ubuntu-20.04
    needs: [test, dast]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Environment
        run: echo "Deploying backend..."

      - name: Deploy Backend
        run: |
          if [ "${{ github.ref_name }}" == "master" ]; then
            echo "Deploying to production"
            docker build -t backend-prod .
            docker run --rm -p 5000:5000 backend-prod
          else
            echo "Deploying to staging"
            docker build -t backend-staging .
            docker run --rm -p 5000:5000 backend-staging

  notify:
    name: Send Notifications
    runs-on: ubuntu-20.04
    needs: deploy
    steps:
      - name: Send Notification
        if: always()
        run: echo "Pipeline completed successfully!"
